.. The OpenSky Network API documentation master file, created by
   sphinx-quickstart on Tue Mar  1 19:48:21 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

The OpenSky Network API documentation
=====================================

These documents give you an overview on OpenSky's public API. The API lets you retrieve live airspace information in the form of *State Vectors*. The following paragraphs will help you understand how we represent an aircraft's state and how to use it. There is also a little more specific documentation available for our :doc:`REST API <rest>`. We provide a :doc:`Python <python>` language binding and a :doc:`Java <java>` language binding for the REST API.

.. _state-vectors:

State Vectors
-------------

State vectors are OpenSky's abstracted view on the airspace. They are also what you will get when you retrieve data from the live API. This section will give you an in-depth description of state vectors.

For each aircraft, which is identified by its unique `ICAO 24-bit address <https://en.wikipedia.org/wiki/Aviation_transponder_interrogation_modes#ICAO_24-bit_address>`_, state vectors are generated every second as long as it is in our range. The first state vector is generated once the airplane enters an airspace covered by one of our sensors. More specifically, state vectors become generated for an aircraft once the first ADS-B position or velocity report is received by one of our sensors. State vectors are generated by aggregating all information about the aircraft received over the duration of one second :math:`[time -1, time]`, where time is (like any other time used in this API) epoch time in seconds (`Unix timestamp <https://en.wikipedia.org/wiki/Unix_time>`_). The information contained in a state vector is derived from the most recently received ADS-B report. 

**Example:** Within the time interval :math:`[0, 1]` there are two position reports :math:`A` and :math:`B` where :math:`A` is received at time :math:`t_A = 0.3` and :math:`B` at :math:`t_B = 0.5`. So the position contained in the state vector for time :math:`t_S = 1` is the position as reported in :math:`B`. The same holds for velocity information.

To tolerate message loss and short losses of the line-of-sight to the airplane, state vectors will be generated for 15 seconds, even if we did not receive any position or velocity report. However, you don't have to worry, the age of information is not lost. It's contained in a state vector as the lastpositionupdate and lasvelocityupdate fields which are the Unix timestamps for the last position or velocity update.

It is worth noting that there might be state vectors where position or velocity information might not be present (i.e. *null*). However, there are no state vectors where both position and velocity are missing.

The last information contained in a state vector is the callsign (6 characters/digits) as reported by ADS-B. We assume that the callsign will not change during a flight and do not provide any age information for this field. Once received, it will be included in all future state vectors.

If we have not received any position or velocity update for a duration of 15 seconds, the state of the respective aircraft will be discarded and no more state vectors will be returned for that particular aircraft.



Further Reading
---------------

.. toctree::
   :maxdepth: 1

   Intro & Data Structures <self>
   REST API <rest>
   Python API <python>
   Java API <java>


